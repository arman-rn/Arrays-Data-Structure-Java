/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Entity.Student;
import java.awt.Dialog;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.Collator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Arman
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        MyList();
        TableSorting();
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Add_Label = new javax.swing.JLabel();
        SearchBar = new javax.swing.JTextField();
        Search_Label = new javax.swing.JLabel();
        ImportButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        RemoveButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Last Name", "Student ID No.", "GPA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        Add_Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/plus-sign.png"))); // NOI18N
        Add_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Add_LabelMouseClicked(evt);
            }
        });

        SearchBar.setToolTipText("");
        SearchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchBarKeyReleased(evt);
            }
        });

        Search_Label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8-search-26.png"))); // NOI18N
        Search_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Search_LabelMouseClicked(evt);
            }
        });

        ImportButton.setText("Import");
        ImportButton.setMaximumSize(new java.awt.Dimension(97, 32));
        ImportButton.setMinimumSize(new java.awt.Dimension(97, 32));
        ImportButton.setPreferredSize(new java.awt.Dimension(97, 32));
        ImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportButtonActionPerformed(evt);
            }
        });

        SaveButton.setText("Save as File");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 836, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SaveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Add_Label)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Search_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EditButton)
                        .addGap(14, 14, 14))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ImportButton, RemoveButton, SaveButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EditButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Search_Label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SearchBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Add_Label)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SaveButton)
                        .addComponent(ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(RemoveButton))
                    .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ImportButton, RemoveButton, SaveButton});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {SearchBar, Search_Label});

        SearchBar.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void traverse() {
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        Object rowData[] = new Object[4];
        for (int i = 0; i < StudentList.length; i++) {
            if (StudentList[i] != null) {
                rowData[0] = StudentList[i].getName();
                rowData[1] = StudentList[i].getFamilyName();
                rowData[2] = StudentList[i].getStudentID_Num();
                rowData[3] = StudentList[i].getGPA();
                tm.addRow(rowData);
            }
        }
    }

    public void ReverseTraverse() {
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        Object rowData[] = new Object[4];
        for (int i = StudentList.length - 1; i >= 0; i--) {
            if (StudentList[i] != null) {
                rowData[0] = StudentList[i].getName();
                rowData[1] = StudentList[i].getFamilyName();
                rowData[2] = StudentList[i].getStudentID_Num();
                rowData[3] = StudentList[i].getGPA();
                tm.addRow(rowData);
            }
        }
    }
    Student[] StudentList;

    public void MyList() {

        StudentList = new Student[100];
        StudentList[0] = new Student("Edward", "Morphy", "289382355", "20");
        StudentList[1] = new Student("Ted", "Stinson", "861826663", "10");
        StudentList[2] = new Student("Debby", "Cooper", "625205503", "16");
        StudentList[3] = new Student("Jenna", "Parker", "407086164", "14");
        StudentList[4] = new Student("Josh", "Ryan", "896011854", "20");
        StudentList[5] = new Student("Sheldon", "Johnson", "622522194", "13");
        StudentList[6] = new Student("Robert", "Elric", "160284584", "17");
        StudentList[7] = new Student("Ashley", "Cordon", "595108791", "19");
        StudentList[8] = new Student("David", "Bowie", "201298394", "18");
        StudentList[9] = new Student("Natalie", "Mitchell", "919814470", "11");
        StudentList[10] = new Student("Tim", "Davis", "735886041", "16");
        StudentList[11] = new Student("James", "Dean", "234206339", "17");
        StudentList[12] = new Student("Russel", "Watson", "243207553", "12");
        StudentList[13] = new Student("Tiffany", "Jackman", "101760682", "11");
        StudentList[14] = new Student("Simon", "Alba", "480655934", "10");
        StudentList[15] = new Student("Eurus", "Holmes", "236398269", "20");
        traverse();
    }
    //First Empty Index
    int n = 16;

    int Insert(Student StudentList[], int n, Student NewStudent, int Capacity) {
        // Cannot insert more elements if n  
        // is already more than or equal to  
        // capcity 
        if (n >= Capacity) {
            JOptionPane.showMessageDialog(null, "List is full!");
        }

        StudentList[n] = NewStudent;

        return (n + 1);
    }

    static int insertinindex(Object arr[], int s, int key, int capacity) {

        if (s >= capacity) {
            return s;
        }

        arr[s] = key;

        return (s + 1);
    }
    Object[] arr = new Object[100];

    int findElement(Student StudentList[], int n, String key) {
        int s = 0;
        DefaultTableModel tm = (DefaultTableModel) jTable1.getModel();
        Object rowData[] = new Object[4];
        for (int i = 0; i < n; i++) {
            if (StudentList[i] != null) {
                if (StudentList[i].getName().compareToIgnoreCase(key) == 0) {
                    rowData[0] = StudentList[i].getName();
                    rowData[1] = StudentList[i].getFamilyName();
                    rowData[2] = StudentList[i].getStudentID_Num();
                    rowData[3] = StudentList[i].getGPA();
                    tm.addRow(rowData);
                } else {
                    if (StudentList[i].getFamilyName().compareToIgnoreCase(key) == 0) {
                        rowData[0] = StudentList[i].getName();
                        rowData[1] = StudentList[i].getFamilyName();
                        rowData[2] = StudentList[i].getStudentID_Num();
                        rowData[3] = StudentList[i].getGPA();
                        tm.addRow(rowData);
                    } else {
                        if (StudentList[i].getStudentID_Num().compareToIgnoreCase(key) == 0) {
                            rowData[0] = StudentList[i].getName();
                            rowData[1] = StudentList[i].getFamilyName();
                            rowData[2] = StudentList[i].getStudentID_Num();
                            rowData[3] = StudentList[i].getGPA();
                            tm.addRow(rowData);
                        } else {
                            if (StudentList[i].getGPA().compareToIgnoreCase(key) == 0) {
                                rowData[0] = StudentList[i].getName();
                                rowData[1] = StudentList[i].getFamilyName();
                                rowData[2] = StudentList[i].getStudentID_Num();
                                rowData[3] = StudentList[i].getGPA();
                                tm.addRow(rowData);
                            }
                        }
                    }
                }
            }
        }
        return -1;
    }


    private void Add_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Add_LabelMouseClicked
        // TODO add your handling code here:
        AddDialog Add = new AddDialog(this, true);
        Add.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        Add.setVisible(true);

        int Capacity = 100;
        Student St = Add.GetStudentInfo();
        if (St != null) {
            Student NewStudent = new Student(St.getName(), St.getFamilyName(), St.getStudentID_Num(), St.getGPA());
            n = Insert(StudentList, n, NewStudent, Capacity);
            DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();

            int RowCount = TM.getRowCount();
            for (int i = RowCount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }
            traverse();
        }
    }//GEN-LAST:event_Add_LabelMouseClicked


    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
        File f = new File("Table Content.txt");
        try {
            FileWriter fw = new FileWriter(f);
            BufferedWriter bw = new BufferedWriter(fw);

            for (int i = 0; i < jTable1.getRowCount(); i++) {  //Rows
                for (int j = 0; j < jTable1.getColumnCount(); j++) {  //Columns
                    bw.write(jTable1.getValueAt(i, j).toString() + " ");
                }
                bw.newLine();
            }

            bw.close();
            fw.close();
            JOptionPane.showMessageDialog(null, "Data Exported");

        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    static int stringCompare(String str1, String str2) {

        int l1 = str1.length();
        int l2 = str2.length();
        int lmin = Math.min(l1, l2);

        for (int i = 0; i < lmin; i++) {
            int str1_ch = (int) str1.charAt(i);
            int str2_ch = (int) str2.charAt(i);

            if (str1_ch != str2_ch) {
                return str1_ch - str2_ch;
            }
        }


        if (l1 != l2) {
            return l1 - l2;
        } // If none of the above conditions is true, 
        // it implies both the strings are equal 
        else {
            return 0;
        }
    }
    private void ImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
        // TODO add your handling code here:
        File f = new File("Table Content.txt");
        try {
            FileReader fr = new FileReader(f);
            BufferedReader br = new BufferedReader(fr);
            Object[] lines = br.lines().toArray();
            Student[] rowContent = new Student[100];
            String Name = "";
            String FamilyName = "";
            String ID = "";
            String GPA = "";
            Collator Col = Collator.getInstance();
            boolean Existence = false;
            for (int i = 0; i < lines.length; i++) {
                String[] row = lines[i].toString().split(" ");
                rowContent[i] = new Student(row[0], row[1], row[2], row[3]);
            }
            for (int k = 0; k < 100; k++) {
                if (rowContent[k] != null) {
                    Name = rowContent[k].getName();
                    FamilyName = rowContent[k].getFamilyName();
                    ID = rowContent[k].getStudentID_Num();
                    GPA = rowContent[k].getGPA();
                }
                for (int a = 0; a < StudentList.length; a++) {
                    if (StudentList[a] != null) {
                        if (Col.compare(StudentList[a].getName(), Name) != 0 && Col.compare(StudentList[a].getFamilyName(), FamilyName) != 0 && Col.compare(StudentList[a].getStudentID_Num(), ID) != 0) {
                            Existence = false;
                        } else {
                            Existence = true;
                            break;
                        }
                    }
                }
                if (Existence == false) {
                    Student ST = new Student(Name, FamilyName, ID, GPA);
                    n = Insert(StudentList, n, ST, 100);
                }
            }
            DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();

            int RowCount = TM.getRowCount();
            for (int i = RowCount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }
            ImportButton.setEnabled(false);
            traverse();

            JOptionPane.showMessageDialog(
                    null, "Data Imported");
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "File not found!");
            //Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ImportButtonActionPerformed

    private void Search_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Search_LabelMouseClicked
        // TODO add your handling code here:
        String text = SearchBar.getText();
        DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
        if (text.trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "Please Enter Something to Search!");
        } else {
            int RowCount = TM.getRowCount();
            for (int i = RowCount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }
            findElement(StudentList, StudentList.length, text);
        }
    }//GEN-LAST:event_Search_LabelMouseClicked

    private void SearchBarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchBarKeyReleased
        // TODO add your handling code here:
        if (SearchBar.getText().trim().length() == 0) {
            DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
            int RowCount = TM.getRowCount();
            for (int i = RowCount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }
            traverse();
        }
    }//GEN-LAST:event_SearchBarKeyReleased

    int findfordelete(Student StudentList[], int l, String key) {
        int i;
        for (i = 0; i < l; i++) {
            if (StudentList[i] != null) {
                if (StudentList[i].getName().compareToIgnoreCase(key) == 0) {
                    return i;
//                } else {
//                    if (StudentList[i].getFamilyName().compareToIgnoreCase(key) == 0) {
//                        return i;
//                    } else {
//
//                        if (StudentList[i].getStudentID_Num().compareToIgnoreCase(key) == 0) {
//                            return i;
//                        } else {
//                            if (StudentList[i].getGPA().compareToIgnoreCase(key) == 0) {
//                                return i;
//
//                            }
//                        }
//                    }
                }
            }
        }
        return -1;
    }

    int deleteElement(Student StudentList[], int l, String key) {
        // Find position of element to be  
        // deleted 
        int pos = findfordelete(StudentList, l, key);

        if (pos == -1) {
            return l;
        }

        // Deleting element 
        int i;
        for (i = pos; i < l - 1; i++) {
            StudentList[i] = StudentList[i + 1];
        }

        return l - 1;
    }

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        try {
            DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
            int row = jTable1.getSelectedRow();
            int l = StudentList.length;
            String Key = TM.getValueAt(row, 0).toString();
            l = deleteElement(StudentList, l, Key);
            int rowcount = TM.getRowCount();
            for (int i = rowcount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }

            traverse();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please Select a Row!");
        }


    }//GEN-LAST:event_RemoveButtonActionPerformed

    int findforedit(Student StudentList[], int j, String key) {
        int i;
        for (i = 0; i < j; i++) {
            if (StudentList[i] != null) {
                if (StudentList[i].getStudentID_Num().compareToIgnoreCase(key) == 0) {
                    return i;
                }
            }
        }
        return -1;
    }
    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        try {
            DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
            int row = jTable1.getSelectedRow();
            String Key = TM.getValueAt(row, 2).toString();
            int j = StudentList.length;
            int pos = findforedit(StudentList, j, Key);
            if (pos == -1) {
                JOptionPane.showMessageDialog(null, "Not Found!");
            }
            String Name = StudentList[pos].getName();
            String FamilyName = StudentList[pos].getFamilyName();
            String IDNum = StudentList[pos].getStudentID_Num();
            String GPA = StudentList[pos].getGPA();
            AddDialog Add = new AddDialog(this, true);
            Add.EditAction(Name, FamilyName, IDNum, GPA);
            Add.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
            Add.setVisible(true);

            Student St = Add.GetStudentInfo();
            String NewName = St.getName();
            String NewFamilyName = St.getFamilyName();
            String NewIdNum = St.getStudentID_Num();
            String NewGPA = St.getGPA();

            StudentList[pos].setName(NewName);
            StudentList[pos].setFamilyName(NewFamilyName);
            StudentList[pos].setStudentID_Num(NewIdNum);
            StudentList[pos].setGPA(NewGPA);

            int rowcount = TM.getRowCount();
            for (int i = rowcount - 1; i >= 0; i--) {
                TM.removeRow(i);
            }

            traverse();

        } catch (Exception e) {
            //JOptionPane.showMessageDialog(null, "Please Select a Row!");
        }
    }//GEN-LAST:event_EditButtonActionPerformed
    //change this comparator

    void BubbleSortingByName(Student[] StudentList, int n) {
        int i, j;
        Student temp;
        boolean swapped;
        Collator Col = Collator.getInstance();
        for (i = 0; i < n - 1; i++) {
            swapped = false;
            for (j = 0; j < n - i - 1; j++) {
                if (StudentList[j] != null && StudentList[j + 1] != null) {
                    if (Col.compare(StudentList[j].getName(), StudentList[j + 1].getName()) > 0) {
                        // swap StudentList[j] and StudentList[j+1] 
                        temp = StudentList[j];
                        StudentList[j] = StudentList[j + 1];
                        StudentList[j + 1] = temp;
                        swapped = true;
                    }
                }
            }

            // IF no two elements were  
            // swapped by inner loop, then break 
            if (swapped == false) {
                break;
            }
        }
    }

    void BubbleSortingByFamilyName(Student[] StudentList, int n) {
        int i, j;
        Student temp;
        boolean swapped;
        Collator Col = Collator.getInstance();
        for (i = 0; i < n - 1; i++) {
            swapped = false;
            for (j = 0; j < n - i - 1; j++) {
                if (StudentList[j] != null && StudentList[j + 1] != null) {
                    if (Col.compare(StudentList[j].getFamilyName(), StudentList[j + 1].getFamilyName()) > 0) {
                        // swap StudentList[j] and StudentList[j+1] 
                        temp = StudentList[j];
                        StudentList[j] = StudentList[j + 1];
                        StudentList[j + 1] = temp;
                        swapped = true;
                    }
                }
            }

            // IF no two elements were  
            // swapped by inner loop, then break 
            if (swapped == false) {
                break;
            }
        }
    }

    void BubbleSortingByStudentIdNum(Student[] StudentList, int n) {
        int i, j;
        Student temp;
        boolean swapped;
        for (i = 0; i < n - 1; i++) {
            swapped = false;
            for (j = 0; j < n - i - 1; j++) {
                if (StudentList[j] != null && StudentList[j + 1] != null) {
                    if (Integer.parseInt(StudentList[j].getStudentID_Num()) > Integer.parseInt(StudentList[j + 1].getStudentID_Num())) {
                        // swap StudentList[j] and StudentList[j+1] 
                        temp = StudentList[j];
                        StudentList[j] = StudentList[j + 1];
                        StudentList[j + 1] = temp;
                        swapped = true;
                    }
                }
            }

            // IF no two elements were  
            // swapped by inner loop, then break 
            if (swapped == false) {
                break;
            }
        }
    }

    void BubbleSortingByGPa(Student[] StudentList, int n) {
        int i, j;
        Student temp;
        boolean swapped;
        for (i = 0; i < n - 1; i++) {
            swapped = false;
            for (j = 0; j < n - i - 1; j++) {
                if (StudentList[j] != null && StudentList[j + 1] != null) {
                    if (Double.parseDouble(StudentList[j].getGPA()) < Double.parseDouble(StudentList[j + 1].getGPA())) {
                        // swap StudentList[j] and StudentList[j+1] 
                        temp = StudentList[j];
                        StudentList[j] = StudentList[j + 1];
                        StudentList[j + 1] = temp;
                        swapped = true;
                    }
                }
            }

            // IF no two elements were  
            // swapped by inner loop, then break 
            if (swapped == false) {
                break;
            }
        }
    }
    int Na = 1;
    int Fn = 1;
    int IdNum = 1;
    int GPAIndex = 1;

    public void TableSorting() {
        jTable1.getTableHeader().addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                DefaultTableModel TM = (DefaultTableModel) jTable1.getModel();
                int col = jTable1.columnAtPoint(e.getPoint());
                int rowcount = TM.getRowCount();
                if (col == 0) {
                    BubbleSortingByName(StudentList, 100);
                    if (Na % 2 == 0) {
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        ReverseTraverse();
                    } else {
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        traverse();
                    }
                    Na++;
                }
                if (col == 1) {
                    BubbleSortingByFamilyName(StudentList, 100);
                    if (Fn % 2 == 0) {
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        ReverseTraverse();
                    } else {
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        traverse();
                    }
                    Fn++;
                }
                if (col == 2) {
                    BubbleSortingByStudentIdNum(StudentList, 100);
                    if (IdNum % 2 == 0) {
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        ReverseTraverse();
                    } else {
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        traverse();
                    }
                    IdNum++;
                }
                if (col == 3) {
                    BubbleSortingByGPa(StudentList, 100);
                    if (GPAIndex % 2 == 0) {
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        ReverseTraverse();
                    } else {
                        for (int i = rowcount - 1; i >= 0; i--) {
                            TM.removeRow(i);
                        }
                        traverse();
                    }
                    GPAIndex++;
                }
            }

        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {


        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Add_Label;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton ImportButton;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JTextField SearchBar;
    private javax.swing.JLabel Search_Label;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
